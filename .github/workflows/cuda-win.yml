name: CMake

on:
  workflow_dispatch:
  push:
    branches: [ "action" ]
  pull_request:
    branches: [ "action" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
  

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install prerequisites 
      run: |
       mkdir build
       cd build
       git clone https://github.com/microsoft/vcpkg
       cd vcpkg
       .\bootstrap-vcpkg.bat
       .\vcpkg.exe install opencv[core]:x64-windows-static
      
    - name: Download ONNX runtime
      run: |
        cd build
        mkdir nuget
        Invoke-WebRequest https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -UseBasicParsing -OutFile nuget.exe
        .\nuget.exe install Microsoft.ML.OnnxRuntime.DirectML -Version 1.11.0
        .\nuget.exe install Microsoft.ML.OnnxRuntime.Gpu -Version 1.11.0
    
    - name: Build OBS from source
      run: |
        cd $HOME\Downloads\
        git clone --recursive git@github.com:obsproject/obs-studio.git
        obs-studio\CI\build-windows.ps1
       
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: |
         cmake .. -Dlibobs_DIR="$HOME\Downloads\obs-studio\build64\libobs" -DWITH_CUDA=ON
         cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
         cpack

#     - name: Test
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: cuda
        path: .\obs-backgroundremoval-win64-cuda.zip
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
     
      
  
